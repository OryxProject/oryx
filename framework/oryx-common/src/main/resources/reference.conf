# Copyright (c) 2014, Cloudera, Inc. All Rights Reserved.
#
# Cloudera, Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"). You may not use this file except in
# compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# This software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
# CONDITIONS OF ANY KIND, either express or implied. See the License for
# the specific language governing permissions and limitations under the
# License.

oryx = {

  # Optional string identifying the entire Oryx instance. Without it, Oryx has no
  # longer-term identity with external systems like Kafka. For example, without this set,
  # on startup the layers read from only the latest available input. With this set,
  # Kafka can load the last offset read and let the layers resume reading where they left off.
  id = null

  # Configuration for the Kafka input topic
  input-topic = {

    # Comma-separated list of Kafka brokers, as host1:port1(,host2:port2,...)
    broker = "localhost:9092"

    lock = {
      # Comma-separated list of Zookeeper masters, as host1:port1(,host2:port2,...)
      # Note that if you need to specify a chroot, then weirdly, it should only appear
      # at the end: host1:port1,host2:port2/chroot, not host1:port1/chroot,host2:port2/chroot
      master = "localhost:2181"
    }

    message = {
      # Input topic
      topic = "OryxInput"

      # Key/message classes that the framework receives, respectively
      key-class = "java.lang.String"
      message-class = "java.lang.String"

      # Decoder classes used to read/write key/message classes
      key-decoder-class = "kafka.serializer.StringDecoder"
      message-decoder-class = "kafka.serializer.StringDecoder"
    }

  }

  # Configuration for the Kafka model update topic
  update-topic = {

    # Comma-separated list of Kafka brokers, as host1:port1(,host2:port2,...)
    broker = "localhost:9092"

    lock = {
      # Comma-separated list of Zookeeper masters, as host1:port1(,host2:port2,...)
      # Note that if you need to specify a chroot, then weirdly, it should only appear
      # at the end: host1:port1,host2:port2/chroot, not host1:port1/chroot,host2:port2/chroot
      master = "localhost:2181"
    }

    message = {
      # Update topic
      topic = "OryxUpdate"

      # Decoder/encoder classes used to read/write key/message classes
      decoder-class = "kafka.serializer.StringDecoder"
      encoder-class = "kafka.serializer.StringEncoder"
    }

  }

  # Batch layer configuration
  batch = {

    # Streaming framework configuration
    streaming = {
      # Spark Streaming master. If local[n], make sure n >= 2
      master = "yarn-client"

      # Rough rule of thumb:
      #  (generation-interval-sec / block-interval-sec) * (# consumers)
      #  should be a small multiple of
      #  (num-executors * executor-cores)
      # (HT: http://www.virdata.com/tuning-spark/)

      # Interval between runs of the computation layer. Default: 6 hours
      generation-interval-sec = 21600

      # Rate at which streaming blocks are created
      # Don't set this unless you know what you're doing
      block-interval-sec = 180

      # Number of executors to start
      num-executors = 4

      # Cores per executor
      executor-cores = 4

      # Memory per executor
      executor-memory = "2g"

      # Heap size for the Batch driver process
      driver-memory = "1g"

      # Number of simultaneous receivers reading from topic
      receiver-parallelism = 1
    }

    # An implementation of com.cloudera.oryx.lambda.batch.BatchLayerUpdate
    # which specifies what is done with current and historical data to update a model
    update-class = null

    storage = {

      #Â Directory where historical data is stored. Can be local, or on HDFS, etc.
      data-dir = "file:/tmp/Oryx/data/"
      # Directory where models are output. Can be local, or on HDFS, etc.
      model-dir = "file:/tmp/Oryx/model/"

      # Writable classes used to persist key/message, respectively
      key-writable-class = "org.apache.hadoop.io.Text"
      message-writable-class = "org.apache.hadoop.io.Text"

      # Max number of data files to write per generation
      # Don't set this unless you know what you're doing
      partitions = 8
    }

    # Configuration for the Spark UI
    ui = {
      # UI port
      port = 4040
    }

  }

  # Speed layer configuration
  speed = {

    # Streaming framework configuration
    streaming = {
      # Spark Streaming master. If local[n], make sure n >= 2
      master = "yarn-client"

      # See tuning rule of thumb above

      # Interval between runs of the computation layer in seconds. Default: 10 seconds
      generation-interval-sec = 10

      # Rate at which streaming blocks are created
      # Don't set this unless you know what you're doing
      block-interval-sec = 1

      # Number of executors to start
      num-executors = 2

      # Cores per executor
      executor-cores = 4

      # Memory per executor
      executor-memory = "1g"

      # Heap size for the Speed driver process
      driver-memory = "512m"

      # Number of simultaneous receivers reading from topic
      receiver-parallelism = 1
    }

    # Implementation of com.cloudera.oryx.lambda.speed.SpeedModelManager interface that produces
    # updates from a SpeedModel and stream of input
    model-manager-class = null

    # Configuration for the Spark UI
    ui = {
      # UI port
      port = 4040
    }

  }

  # Serving layer configuration
  serving = {

    api = {
      # Default to use well-known HTTP port for Serving Layer
      port = 80
      # Default to use well-known HTTPS port for Serving Layer
      secure-port = 443

      # User name for connecting to the service, if required. If set, must be set with password.
      # If enabled, this will enable HTTP DIGEST authentication in the API.
      user-name = null
      # Password for connecting to the service, if required. If set, must be set with user-name.
      # If enabled, this will enable HTTP DIGEST authentication in the API.
      password = null

      # The keystore file containing the server's SSL keys. Only necessary when
      # accessing a server with temporary self-signed key, which is not trusted
      # by the Java SSL implementation.
      keystore-file = null
      # Password needed for keystore file above, if any
      keystore-password = null

      # If true, operations that set or modify data, like /ingest, are not available
      read-only = false
      # An optional prefix for the path under which the service is deployed. For
      # example, set to "/contextPath" to expose services at paths like "http://example.org/contextPath/..."
      context-path = "/"

    }

    # Where to load application JAX-RS resources (one or more comma-separated Java package names)
    application-resources = null

    # Implementation of com.cloudera.oryx.lambda.serving.ServingModelManager interface
    # that produces a ServingModel from stream of updates
    model-manager-class = null

    # Test-only option; don't set this in general
    no-init-topics = false

  }

  # ML tier configuration
  ml = {

    # Model evaluation settings
    eval = {
      # Fraction of current data that is used for test, versus training
      test-fraction = 0.1
      # Increase to build more candidate models per run, and pick the best one
      candidates = 1
      # Number of models to build in parallel
      parallelism = 1
    }

  }

}
